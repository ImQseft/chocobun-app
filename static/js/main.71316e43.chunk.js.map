{"version":3,"sources":["components/navbar.jsx","components/fillform.jsx","App.js","serviceWorker.js","index.js"],"names":["withStyles","root","flexGrow","props","classes","react_default","a","createElement","className","AppBar_default","position","color","Toolbar_default","Typography_default","variant","FillForm","state","base","yourScore","totalItems","res1","res2","handleChange","name","event","_this","setState","Object","defineProperty","target","value","handleTransmute","tScore","pScore","parseInt","Math","round","this","Fragment","FormControl_default","InputLabel_default","htmlFor","Select_default","native","onChange","TextField_default","id","label","textField","margin","fullWidth","type","Button_default","onClick","React","Component","theme","display","flexWrap","formControl","spacing","unit","minWidth","selectEmpty","marginTop","App","document","body","style","navbar","fillform","window","addEventListener","scale","preventDefault","passive","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","createMuiTheme","typography","useNextVariants","palette","primary","main","brown","background","ReactDOM","render","styles","src_App_0","getElementById","onLine","URL","process","href","origin","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.71316e43.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst styles = {\r\n  root: {\r\n    flexGrow: 1\r\n  }\r\n};\r\n\r\nfunction NavBar(props) {\r\n  const { classes } = props;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"sticky\" color=\"primary\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" color=\"inherit\">\r\n            Chocobun\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nNavBar.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(NavBar);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\"\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing.unit,\r\n    minWidth: 120\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing.unit * 2\r\n  }\r\n});\r\n\r\nclass FillForm extends React.Component {\r\n  state = {\r\n    base: \"65\",\r\n    yourScore: \"\",\r\n    totalItems: \"\",\r\n    res1: \"Chocobun App by Chocobun Fam\",\r\n    res2: \"v0.1.4\"\r\n  };\r\n\r\n  handleChange = name => event => {\r\n    this.setState({ [name]: event.target.value });\r\n  };\r\n\r\n  handleTransmute = () => {\r\n    let tScore, pScore, scoreStat;\r\n\r\n    if (this.state.base === \"65\") {\r\n      tScore =\r\n        (parseInt(this.state.yourScore) / parseInt(this.state.totalItems)) *\r\n          71.5 +\r\n        28.5;\r\n      tScore = Math.round(tScore);\r\n      pScore = parseInt(this.state.totalItems) * 0.65;\r\n    } else if (this.state.base === \"60\") {\r\n      tScore =\r\n        (parseInt(this.state.yourScore) / parseInt(this.state.totalItems)) *\r\n          62.5 +\r\n        37.5;\r\n      tScore = Math.round(tScore);\r\n      pScore = parseInt(this.state.totalItems) * 0.6;\r\n    } else if (this.state.base === \"50\") {\r\n      tScore =\r\n        (parseInt(this.state.yourScore) / parseInt(this.state.totalItems)) *\r\n          50 +\r\n        50;\r\n      tScore = Math.round(tScore);\r\n      pScore = parseInt(this.state.totalItems) * 0.5;\r\n    }\r\n\r\n    if (parseInt(this.state.yourScore) >= pScore) {\r\n      scoreStat = \"You passed! \";\r\n    } else {\r\n      scoreStat = \"You failed! \";\r\n    }\r\n\r\n    const res1 = scoreStat + \"The passing score is: \" + pScore;\r\n    const res2 = \"Your transmuted grade is: \" + tScore;\r\n    this.setState({ res1, res2 });\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"ScoreInput\">\r\n          <FormControl>\r\n            <InputLabel htmlFor=\"base-native-simple\">Base</InputLabel>\r\n            <Select\r\n              native\r\n              value={this.state.base}\r\n              onChange={this.handleChange(\"base\")}\r\n            >\r\n              <option value={65}>65</option>\r\n              <option value={55}>55</option>\r\n              <option value={50}>50</option>\r\n            </Select>\r\n          </FormControl>\r\n          <TextField\r\n            id=\"standard-yourScore\"\r\n            label=\"Your Score\"\r\n            className={classes.textField}\r\n            value={this.state.yourScore}\r\n            onChange={this.handleChange(\"yourScore\")}\r\n            margin=\"normal\"\r\n            fullWidth\r\n            type=\"tel\"\r\n          />\r\n          <TextField\r\n            id=\"standard-totalItems\"\r\n            label=\"Total Items\"\r\n            className={classes.textField}\r\n            value={this.state.totalItems}\r\n            onChange={this.handleChange(\"totalItems\")}\r\n            margin=\"normal\"\r\n            fullWidth\r\n            type=\"tel\"\r\n          />\r\n        </div>\r\n        <div className=\"TransmuteButton\">\r\n          <Button\r\n            onClick={this.handleTransmute}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Transmute\r\n          </Button>\r\n        </div>\r\n        <div className=\"TransmuteResult\">\r\n          <p>{this.state.res1}</p>\r\n          <p>{this.state.res2}</p>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nFillForm.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(FillForm);\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\n//Import Components\nimport NavBar from \"./components/navbar\";\nimport FillForm from \"./components/fillform\";\n\nclass App extends Component {\n  render() {\n    return (\n      (document.body.style = \"background: #ffebcd\"),\n      (\n        <div className=\"fixedScreen noselect\">\n          <NavBar />\n          <FillForm />\n        </div>\n      )\n    );\n  }\n}\n\nexport default App;\n\n//Disable Zooming\nwindow.addEventListener(\n  \"touchmove\",\n  function(event) {\n    if (event.scale !== 1) {\n      event.preventDefault();\n    }\n  },\n  { passive: false }\n);\n","const isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport brown from \"@material-ui/core/colors/brown\";\n\nconst theme = createMuiTheme({\n  typography: {\n    useNextVariants: true\n  },\n  palette: {\n    primary: {\n      main: brown[500]\n    },\n    background: \"#ffebcd\"\n  }\n});\n\nReactDOM.render(\n  <MuiThemeProvider theme={theme}>\n    <App />\n  </MuiThemeProvider>,\n  document.getElementById(\"root\")\n);\n\nif (navigator.onLine) {\n  serviceWorker.register();\n}\n"],"sourceRoot":""}